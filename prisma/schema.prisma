// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true
  createInputTypes = false
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                        String                  @id @default(cuid())
  name                      String?
  email                     String?                 @unique
  emailVerified             Boolean
  image                     String?
  currency                  String                  @default("USD")
  analyticsEnabled          Boolean                 @default(false)
  reminderPreference        String?
  stellarAccount            String?
  chainAccounts             ChainAccount[] // Add this new relation
  acceptedTokens            UserAcceptedToken[] // New relation to track accepted tokens
  accounts                  Account[]
  sessions                  Session[]
  groups                    Group[]
  associatedGroups          GroupUser[]
  expenseParticipants       ExpenseParticipant[]
  expenseNotes              ExpenseNote[]
  userBalances              Balance[]               @relation("UserBalance")
  friendBalances            Balance[]               @relation("FriendBalance")
  groupUserBalances         GroupBalance[]          @relation("GroupUserBalance")
  groupFriendBalances       GroupBalance[]          @relation("GroupFriendBalance")
  paidExpenses              Expense[]               @relation("PaidByUser")
  addedExpenses             Expense[]               @relation("AddedByUser")
  deletedExpenses           Expense[]               @relation("DeletedByUser")
  updatedExpenses           Expense[]               @relation("UpdatedByUser")
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  friends                   Friendship[]            @relation("UserFriends")
  friendOf                  Friendship[]            @relation("FriendOfUser")
  sentSettlements           SettlementTransaction[] @relation()
  receiveSettlements        SettlementTransaction[] @relation("SettlementWithUser")
  settlementItemsAsPayer    SettlementItem[]        @relation("SettlementItemUser")
  settlementItemsAsReceiver SettlementItem[]        @relation("SettlementItemFriend")
  sentReminders             UserReminder[]          @relation("UserSender")
  reminderFrequency         String?
  lastReminderSentAt        DateTime?
  receivedReminders         UserReminder[]          @relation("UserReceiver")
  timeLockInDefault         Boolean                 @default(false)

  @@map("user")
}

// New model to store user's addresses for different chains
model ChainAccount {
  id        String   @id @default(cuid())
  userId    String
  chainId   String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain SupportedChain @relation(fields: [chainId], references: [id])

  @@unique([userId, chainId, address])
  @@index([userId])
  @@index([chainId])
}

// Store chain information
model SupportedChain {
  id            String   @id // Chain ID
  name          String
  currency      String
  rpcUrl        String
  blockExplorer String
  testnet       Boolean  @default(false)
  logoUrl       String?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tokens             Token[]
  transactions       SettlementTransaction[]
  userAccounts       ChainAccount[]
  UserAcceptedToken  UserAcceptedToken[]
  GroupAcceptedToken GroupAcceptedToken[]
}

// Store token information
model Token {
  id                 String   @id
  name               String
  symbol             String
  decimals           Int
  type               String // "native" or "token" or "fiat"
  chainId            String
  contractAddress    String?
  logoUrl            String?
  enabled            Boolean  @default(true)
  exchangeRateSource String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  chain               SupportedChain       @relation(fields: [chainId], references: [id])
  userAcceptedTokens  UserAcceptedToken[]
  groupAcceptedTokens GroupAcceptedToken[]

  @@unique([chainId, symbol])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Balance {
  userId                String
  currency              String
  friendId              String
  amount                Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  importedFromSplitwise Boolean  @default(false)
  user                  User     @relation(name: "UserBalance", fields: [userId], references: [id], onDelete: Cascade)
  friend                User     @relation(name: "FriendBalance", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([userId, currency, friendId])
}

model Group {
  id                     String                  @id @default(cuid())
  name                   String
  userId                 String
  description            String?
  image                  String?
  defaultCurrency        String                  @default("USD")
  acceptedTokens         GroupAcceptedToken[] // New relation to track accepted tokens
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  // contractGroupId Int      @unique
  settlementTransactions SettlementTransaction[]

  createdBy     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupUsers    GroupUser[]
  expenses      Expense[]
  groupBalances GroupBalance[]
}

model GroupUser {
  groupId String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
}

model GroupBalance {
  groupId   String
  currency  String
  userId    String
  firendId  String
  amount    Float
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(name: "GroupUserBalance", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation(name: "GroupFriendBalance", fields: [firendId], references: [id], onDelete: Cascade)

  @@id([groupId, currency, firendId, userId])
}

enum SplitType {
  EQUAL
  PERCENTAGE
  EXACT
  SHARE
  ADJUSTMENT
  SETTLEMENT
}

model Expense {
  id                  String               @id @default(cuid())
  paidBy              String
  addedBy             String
  name                String
  category            String
  amount              Float
  splitType           SplitType            @default(EQUAL)
  expenseDate         DateTime             @default(now())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  currency            String // Can be fiat currency code or token symbol
  currencyType        CurrencyType         @default(FIAT) // Added to distinguish between fiat and token currencies
  tokenId             String? // Reference to token if currencyType is TOKEN
  chainId             String? // Reference to chain if currencyType is TOKEN
  acceptedTokenIds    String[] // New field to store accepted tokens for settlement
  exchangeRate        Float? // Store exchange rate at time of expense creation if time lock-in is enabled
  timeLockIn          Boolean              @default(false) // Whether to lock the expense amount to current exchange rate
  fileKey             String?
  groupId             String?
  deletedAt           DateTime?
  deletedBy           String?
  updatedBy           String?
  group               Group?               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidByUser          User                 @relation(name: "PaidByUser", fields: [paidBy], references: [id], onDelete: Cascade)
  addedByUser         User                 @relation(name: "AddedByUser", fields: [addedBy], references: [id])
  deletedByUser       User?                @relation(name: "DeletedByUser", fields: [deletedBy], references: [id], onDelete: SetNull)
  updatedByUser       User?                @relation(name: "UpdatedByUser", fields: [updatedBy], references: [id], onDelete: SetNull)
  expenseParticipants ExpenseParticipant[]
  expenseNotes        ExpenseNote[]
  UserReminder        UserReminder[]

  @@index([groupId])
  @@index([paidBy])
}

model ExpenseParticipant {
  expenseId String
  userId    String
  amount    Float
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@id([expenseId, userId])
}

model ExpenseNote {
  id          String   @id @default(cuid())
  expenseId   String
  note        String
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model PushNotification {
  userId       String @id
  subscription String
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Friendship {
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([userId, friendId])
  @@unique([userId, friendId])
}

model SettlementTransaction {
  id              String    @id @default(uuid())
  userId          String
  groupId         String
  serializedTx    String
  settleWithId    String?
  status          String    @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  transactionHash String?
  chainId         String // Added for multi-chain support
  tokenId         String? // Added for multi-token support

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  settleWith      User?            @relation("SettlementWithUser", fields: [settleWithId], references: [id])
  group           Group            @relation(fields: [groupId], references: [id])
  settlementItems SettlementItem[]
  chain           SupportedChain   @relation(fields: [chainId], references: [id])
}

model SettlementItem {
  id                      String                @id @default(cuid())
  settlementTransactionId String
  userId                  String
  friendId                String
  amount                  Float
  createdAt               DateTime              @default(now())
  currency                String
  // Group-related fields
  groupId                 String?
  afterSettlementBalance  Float?
  user                    User                  @relation("SettlementItemUser", fields: [userId], references: [id])
  friend                  User                  @relation("SettlementItemFriend", fields: [friendId], references: [id])
  settlementTransaction   SettlementTransaction @relation(fields: [settlementTransactionId], references: [id], onDelete: Cascade)
}

enum CurrencyType {
  FIAT
  TOKEN
}

// Add a table to track fiat currencies
model FiatCurrency {
  id          String   @id // Currency code (e.g., USD, EUR, INR)
  name        String
  symbol      String
  coinGeckoId String
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model to track user's accepted tokens
model UserAcceptedToken {
  id        String   @id @default(cuid())
  userId    String
  tokenId   String
  chainId   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  token Token          @relation(fields: [tokenId], references: [id])
  chain SupportedChain @relation(fields: [chainId], references: [id])

  @@unique([userId, tokenId, chainId])
  @@index([userId])
  @@index([tokenId])
}

// New model to track group's accepted tokens
model GroupAcceptedToken {
  id        String   @id @default(cuid())
  groupId   String
  tokenId   String
  chainId   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  token Token          @relation(fields: [tokenId], references: [id])
  chain SupportedChain @relation(fields: [chainId], references: [id])

  @@unique([groupId, tokenId, chainId])
  @@index([groupId])
  @@index([tokenId])
}

enum ReminderType {
  USER
  SPLIT
}

enum ReminderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model UserReminder {
  id           String         @id @default(uuid())
  senderId     String
  receiverId   String
  reminderType ReminderType
  splitId      String?
  content      String?
  status       ReminderStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sender       User           @relation("UserSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User           @relation("UserReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  split        Expense?       @relation(fields: [splitId], references: [id], onDelete: Cascade)
}
